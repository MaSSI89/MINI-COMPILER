Terminals unused in grammar

    mc_start
    mc_aff


State 7 conflicts: 7 shift/reduce
State 20 conflicts: 7 shift/reduce
State 21 conflicts: 6 shift/reduce
State 29 conflicts: 7 shift/reduce
State 35 conflicts: 7 shift/reduce
State 36 conflicts: 6 shift/reduce
State 37 conflicts: 1 shift/reduce, 8 reduce/reduce
State 41 conflicts: 1 shift/reduce
State 43 conflicts: 6 shift/reduce, 8 reduce/reduce
State 55 conflicts: 1 shift/reduce, 8 reduce/reduce
State 56 conflicts: 1 shift/reduce, 8 reduce/reduce
State 59 conflicts: 1 shift/reduce
State 60 conflicts: 8 reduce/reduce
State 119 conflicts: 2 shift/reduce
State 120 conflicts: 2 shift/reduce
State 121 conflicts: 6 shift/reduce
State 127 conflicts: 8 shift/reduce
State 137 conflicts: 6 shift/reduce
State 138 conflicts: 6 shift/reduce
State 140 conflicts: 7 shift/reduce
State 141 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 $@1: ε

    2 program: $@1 COMMENT mc_ident DATA_SECTION CODE_SECTION mc_endp

    3 DATA_SECTION: mc_data DECLARATIONS mc_endp

    4 DECLARATIONS: DEC
    5             | DECLARATIONS DEC
    6             | COMMENT DECLARATIONS
    7             | DECLARATIONS COMMENT
    8             | ε

    9 $@2: ε

   10 DEC: VAR_TYPE $@2 mc_deuxp LISTE_VAR mc_pvg
   11    | DEC_CONST
   12    | DEC_VECTOR

   13 VAR_TYPE: mc_integ
   14         | mc_float
   15         | mc_char
   16         | mc_string

   17 LISTE_VAR: mc_ident
   18          | mc_ident mc_separateur LISTE_VAR

   19 DEC_CONST: mc_const mc_deuxp mc_ident mc_affectation VALEURS mc_pvg

   20 $@3: ε

   21 DEC_VECTOR: mc_vector mc_deuxp mc_ident $@3 mc_crocheto mc_cst mc_vg mc_cst mc_deuxp VAR_TYPE mc_crochetf mc_pvg

   22 VALEURS: mc_charactere
   23        | mc_chaine
   24        | INT_CONST
   25        | mc_cst

   26 CODE_SECTION: mc_code INSTRUCTIONS mc_endp

   27 INSTRUCTIONS: INSTRUCTION
   28             | INSTRUCTIONS INSTRUCTION

   29 COMMENT: mc_comment

   30 INSTRUCTION: INSTRUCTION_AFFECTATION
   31            | INSTRUCTION_LIRE
   32            | INSTRUCTION_ECRIRE
   33            | INSTRUCTION_CONDITION
   34            | INSTRUCTION_BOUCLE
   35            | COMMENT INSTRUCTION
   36            | INSTRUCTION COMMENT
   37            | ε

   38 INSTRUCTION_AFFECTATION: mc_ident mc_affectation EXPRESSION mc_pvg

   39 EXPRESSION: TERME
   40           | EXPRESSION mc_plus TERME
   41           | EXPRESSION mc_moins TERME

   42 TERME: FACTEUR
   43      | TERME mc_mult FACTEUR
   44      | TERME mc_div FACTEUR

   45 FACTEUR: mc_ident
   46        | INT_CONST
   47        | mc_charactere
   48        | mc_chaine
   49        | mc_cst
   50        | mc_paro EXPRESSION mc_parf
   51        | mc_paro mc_moins FACTEUR mc_parf

   52 INSTRUCTION_LIRE: mc_read mc_paro mc_chaine mc_deuxp mc_adresse mc_ident mc_parf mc_pvg

   53 INSTRUCTION_ECRIRE: mc_display mc_paro mc_chaine mc_deuxp mc_ident mc_parf mc_pvg

   54 INSTRUCTION_CONDITION: STRUCTURE_CONDITIONELLE
   55                      | INSTRUCTION_CONDITION STRUCTURE_CONDITIONELLE

   56 STRUCTURE_CONDITIONELLE: mc_if mc_paro CONDITION mc_parf mc_deuxp INSTRUCTIONS mc_else mc_deuxp INSTRUCTIONS mc_endp
   57                        | mc_if mc_paro CONDITION mc_parf mc_deuxp INSTRUCTIONS mc_endp

   58 CONDITION: CONDITION mc_and CONDITION
   59          | CONDITION mc_or CONDITION
   60          | EXPRESSION OPERATEUR_COMPAR EXPRESSION
   61          | EXPRESSION

   62 OPERATEUR_COMPAR: mc_sup
   63                 | mc_inf
   64                 | mc_supeg
   65                 | mc_infeg
   66                 | mc_egal
   67                 | mc_diff

   68 INSTRUCTION_BOUCLE: INSTRUCTION_BOUCLE BLOC_BOUCLE
   69                   | BLOC_BOUCLE

   70 BLOC_BOUCLE: mc_for mc_paro mc_ident mc_deuxp mc_cst mc_deuxp mc_ident mc_parf INSTRUCTION mc_endp
   71            | INSTRUCTION


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    mc_code (258) 26
    mc_data (259) 3
    mc_start (260)
    mc_endp (261) 2 3 26 56 57 70
    mc_aff (262)
    mc_pvg (263) 10 19 21 38 52 53
    mc_or (264) 59
    mc_and (265) 58
    mc_sup (266) 62
    mc_inf (267) 63
    mc_supeg (268) 64
    mc_infeg (269) 65
    mc_egal (270) 66
    mc_diff (271) 67
    mc_plus (272) 40
    mc_moins (273) 41 51
    mc_mult (274) 43
    mc_div (275) 44
    mc_adresse (276) 52
    mc_affectation (277) 19 38
    mc_crocheto (278) 21
    mc_crochetf (279) 21
    mc_comment (280) 29
    mc_deuxp (281) 10 19 21 52 53 56 57 70
    mc_vg (282) 21
    mc_vector (283) 21
    mc_paro (284) 50 51 52 53 56 57 70
    mc_parf (285) 50 51 52 53 56 57 70
    mc_separateur (286) 18
    mc_read (287) 52
    mc_display (288) 53
    mc_if (289) 56 57
    mc_else (290) 56
    mc_for (291) 70
    INT_CONST <int_val> (292) 24 46
    mc_ident <str_val> (293) 2 17 18 19 21 38 45 52 53 70
    mc_cst <str_val> (294) 21 25 49 70
    mc_chaine <str_val> (295) 23 48 52 53
    mc_charactere <char_val> (296) 22 47
    mc_integ (297) 13
    mc_float (298) 14
    mc_char (299) 15
    mc_string (300) 16
    mc_const (301) 19


Nonterminals, with rules where they appear

    $accept (47)
        on left: 0
    program (48)
        on left: 2
        on right: 0
    $@1 (49)
        on left: 1
        on right: 2
    DATA_SECTION (50)
        on left: 3
        on right: 2
    DECLARATIONS (51)
        on left: 4 5 6 7 8
        on right: 3 5 6 7
    DEC (52)
        on left: 10 11 12
        on right: 4 5
    $@2 (53)
        on left: 9
        on right: 10
    VAR_TYPE <type_val> (54)
        on left: 13 14 15 16
        on right: 10 21
    LISTE_VAR <str_val> (55)
        on left: 17 18
        on right: 10 18
    DEC_CONST (56)
        on left: 19
        on right: 11
    DEC_VECTOR (57)
        on left: 21
        on right: 12
    $@3 (58)
        on left: 20
        on right: 21
    VALEURS <int_val> (59)
        on left: 22 23 24 25
        on right: 19
    CODE_SECTION (60)
        on left: 26
        on right: 2
    INSTRUCTIONS (61)
        on left: 27 28
        on right: 26 28 56 57
    COMMENT (62)
        on left: 29
        on right: 2 6 7 35 36
    INSTRUCTION (63)
        on left: 30 31 32 33 34 35 36 37
        on right: 27 28 35 36 70 71
    INSTRUCTION_AFFECTATION (64)
        on left: 38
        on right: 30
    EXPRESSION <int_val> (65)
        on left: 39 40 41
        on right: 38 40 41 50 60 61
    TERME <int_val> (66)
        on left: 42 43 44
        on right: 39 40 41 43 44
    FACTEUR <int_val> (67)
        on left: 45 46 47 48 49 50 51
        on right: 42 43 44 51
    INSTRUCTION_LIRE (68)
        on left: 52
        on right: 31
    INSTRUCTION_ECRIRE (69)
        on left: 53
        on right: 32
    INSTRUCTION_CONDITION (70)
        on left: 54 55
        on right: 33 55
    STRUCTURE_CONDITIONELLE (71)
        on left: 56 57
        on right: 54 55
    CONDITION (72)
        on left: 58 59 60 61
        on right: 56 57 58 59
    OPERATEUR_COMPAR (73)
        on left: 62 63 64 65 66 67
        on right: 60
    INSTRUCTION_BOUCLE (74)
        on left: 68 69
        on right: 34 68
    BLOC_BOUCLE (75)
        on left: 70 71
        on right: 68 69


State 0

    0 $accept: • program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    2 program: $@1 • COMMENT mc_ident DATA_SECTION CODE_SECTION mc_endp

    mc_comment  shift, and go to state 4

    COMMENT  go to state 5


State 3

    0 $accept: program $end •

    $default  accept


State 4

   29 COMMENT: mc_comment •

    $default  reduce using rule 29 (COMMENT)


State 5

    2 program: $@1 COMMENT • mc_ident DATA_SECTION CODE_SECTION mc_endp

    mc_ident  shift, and go to state 6


State 6

    2 program: $@1 COMMENT mc_ident • DATA_SECTION CODE_SECTION mc_endp

    mc_data  shift, and go to state 7

    DATA_SECTION  go to state 8


State 7

    3 DATA_SECTION: mc_data • DECLARATIONS mc_endp

    mc_comment  shift, and go to state 4
    mc_vector   shift, and go to state 9
    mc_integ    shift, and go to state 10
    mc_float    shift, and go to state 11
    mc_char     shift, and go to state 12
    mc_string   shift, and go to state 13
    mc_const    shift, and go to state 14

    mc_comment  [reduce using rule 8 (DECLARATIONS)]
    mc_vector   [reduce using rule 8 (DECLARATIONS)]
    mc_integ    [reduce using rule 8 (DECLARATIONS)]
    mc_float    [reduce using rule 8 (DECLARATIONS)]
    mc_char     [reduce using rule 8 (DECLARATIONS)]
    mc_string   [reduce using rule 8 (DECLARATIONS)]
    mc_const    [reduce using rule 8 (DECLARATIONS)]
    $default    reduce using rule 8 (DECLARATIONS)

    DECLARATIONS  go to state 15
    DEC           go to state 16
    VAR_TYPE      go to state 17
    DEC_CONST     go to state 18
    DEC_VECTOR    go to state 19
    COMMENT       go to state 20


State 8

    2 program: $@1 COMMENT mc_ident DATA_SECTION • CODE_SECTION mc_endp

    mc_code  shift, and go to state 21

    CODE_SECTION  go to state 22


State 9

   21 DEC_VECTOR: mc_vector • mc_deuxp mc_ident $@3 mc_crocheto mc_cst mc_vg mc_cst mc_deuxp VAR_TYPE mc_crochetf mc_pvg

    mc_deuxp  shift, and go to state 23


State 10

   13 VAR_TYPE: mc_integ •

    $default  reduce using rule 13 (VAR_TYPE)


State 11

   14 VAR_TYPE: mc_float •

    $default  reduce using rule 14 (VAR_TYPE)


State 12

   15 VAR_TYPE: mc_char •

    $default  reduce using rule 15 (VAR_TYPE)


State 13

   16 VAR_TYPE: mc_string •

    $default  reduce using rule 16 (VAR_TYPE)


State 14

   19 DEC_CONST: mc_const • mc_deuxp mc_ident mc_affectation VALEURS mc_pvg

    mc_deuxp  shift, and go to state 24


State 15

    3 DATA_SECTION: mc_data DECLARATIONS • mc_endp
    5 DECLARATIONS: DECLARATIONS • DEC
    7             | DECLARATIONS • COMMENT

    mc_endp     shift, and go to state 25
    mc_comment  shift, and go to state 4
    mc_vector   shift, and go to state 9
    mc_integ    shift, and go to state 10
    mc_float    shift, and go to state 11
    mc_char     shift, and go to state 12
    mc_string   shift, and go to state 13
    mc_const    shift, and go to state 14

    DEC         go to state 26
    VAR_TYPE    go to state 17
    DEC_CONST   go to state 18
    DEC_VECTOR  go to state 19
    COMMENT     go to state 27


State 16

    4 DECLARATIONS: DEC •

    $default  reduce using rule 4 (DECLARATIONS)


State 17

   10 DEC: VAR_TYPE • $@2 mc_deuxp LISTE_VAR mc_pvg

    $default  reduce using rule 9 ($@2)

    $@2  go to state 28


State 18

   11 DEC: DEC_CONST •

    $default  reduce using rule 11 (DEC)


State 19

   12 DEC: DEC_VECTOR •

    $default  reduce using rule 12 (DEC)


State 20

    6 DECLARATIONS: COMMENT • DECLARATIONS

    mc_comment  shift, and go to state 4
    mc_vector   shift, and go to state 9
    mc_integ    shift, and go to state 10
    mc_float    shift, and go to state 11
    mc_char     shift, and go to state 12
    mc_string   shift, and go to state 13
    mc_const    shift, and go to state 14

    mc_comment  [reduce using rule 8 (DECLARATIONS)]
    mc_vector   [reduce using rule 8 (DECLARATIONS)]
    mc_integ    [reduce using rule 8 (DECLARATIONS)]
    mc_float    [reduce using rule 8 (DECLARATIONS)]
    mc_char     [reduce using rule 8 (DECLARATIONS)]
    mc_string   [reduce using rule 8 (DECLARATIONS)]
    mc_const    [reduce using rule 8 (DECLARATIONS)]
    $default    reduce using rule 8 (DECLARATIONS)

    DECLARATIONS  go to state 29
    DEC           go to state 16
    VAR_TYPE      go to state 17
    DEC_CONST     go to state 18
    DEC_VECTOR    go to state 19
    COMMENT       go to state 20


State 21

   26 CODE_SECTION: mc_code • INSTRUCTIONS mc_endp

    mc_comment  shift, and go to state 4
    mc_read     shift, and go to state 30
    mc_display  shift, and go to state 31
    mc_if       shift, and go to state 32
    mc_for      shift, and go to state 33
    mc_ident    shift, and go to state 34

    mc_comment  [reduce using rule 37 (INSTRUCTION)]
    mc_read     [reduce using rule 37 (INSTRUCTION)]
    mc_display  [reduce using rule 37 (INSTRUCTION)]
    mc_if       [reduce using rule 37 (INSTRUCTION)]
    mc_for      [reduce using rule 37 (INSTRUCTION)]
    mc_ident    [reduce using rule 37 (INSTRUCTION)]
    $default    reduce using rule 37 (INSTRUCTION)

    INSTRUCTIONS             go to state 35
    COMMENT                  go to state 36
    INSTRUCTION              go to state 37
    INSTRUCTION_AFFECTATION  go to state 38
    INSTRUCTION_LIRE         go to state 39
    INSTRUCTION_ECRIRE       go to state 40
    INSTRUCTION_CONDITION    go to state 41
    STRUCTURE_CONDITIONELLE  go to state 42
    INSTRUCTION_BOUCLE       go to state 43
    BLOC_BOUCLE              go to state 44


State 22

    2 program: $@1 COMMENT mc_ident DATA_SECTION CODE_SECTION • mc_endp

    mc_endp  shift, and go to state 45


State 23

   21 DEC_VECTOR: mc_vector mc_deuxp • mc_ident $@3 mc_crocheto mc_cst mc_vg mc_cst mc_deuxp VAR_TYPE mc_crochetf mc_pvg

    mc_ident  shift, and go to state 46


State 24

   19 DEC_CONST: mc_const mc_deuxp • mc_ident mc_affectation VALEURS mc_pvg

    mc_ident  shift, and go to state 47


State 25

    3 DATA_SECTION: mc_data DECLARATIONS mc_endp •

    $default  reduce using rule 3 (DATA_SECTION)


State 26

    5 DECLARATIONS: DECLARATIONS DEC •

    $default  reduce using rule 5 (DECLARATIONS)


State 27

    7 DECLARATIONS: DECLARATIONS COMMENT •

    $default  reduce using rule 7 (DECLARATIONS)


State 28

   10 DEC: VAR_TYPE $@2 • mc_deuxp LISTE_VAR mc_pvg

    mc_deuxp  shift, and go to state 48


State 29

    5 DECLARATIONS: DECLARATIONS • DEC
    6             | COMMENT DECLARATIONS •
    7             | DECLARATIONS • COMMENT

    mc_comment  shift, and go to state 4
    mc_vector   shift, and go to state 9
    mc_integ    shift, and go to state 10
    mc_float    shift, and go to state 11
    mc_char     shift, and go to state 12
    mc_string   shift, and go to state 13
    mc_const    shift, and go to state 14

    mc_comment  [reduce using rule 6 (DECLARATIONS)]
    mc_vector   [reduce using rule 6 (DECLARATIONS)]
    mc_integ    [reduce using rule 6 (DECLARATIONS)]
    mc_float    [reduce using rule 6 (DECLARATIONS)]
    mc_char     [reduce using rule 6 (DECLARATIONS)]
    mc_string   [reduce using rule 6 (DECLARATIONS)]
    mc_const    [reduce using rule 6 (DECLARATIONS)]
    $default    reduce using rule 6 (DECLARATIONS)

    DEC         go to state 26
    VAR_TYPE    go to state 17
    DEC_CONST   go to state 18
    DEC_VECTOR  go to state 19
    COMMENT     go to state 27


State 30

   52 INSTRUCTION_LIRE: mc_read • mc_paro mc_chaine mc_deuxp mc_adresse mc_ident mc_parf mc_pvg

    mc_paro  shift, and go to state 49


State 31

   53 INSTRUCTION_ECRIRE: mc_display • mc_paro mc_chaine mc_deuxp mc_ident mc_parf mc_pvg

    mc_paro  shift, and go to state 50


State 32

   56 STRUCTURE_CONDITIONELLE: mc_if • mc_paro CONDITION mc_parf mc_deuxp INSTRUCTIONS mc_else mc_deuxp INSTRUCTIONS mc_endp
   57                        | mc_if • mc_paro CONDITION mc_parf mc_deuxp INSTRUCTIONS mc_endp

    mc_paro  shift, and go to state 51


State 33

   70 BLOC_BOUCLE: mc_for • mc_paro mc_ident mc_deuxp mc_cst mc_deuxp mc_ident mc_parf INSTRUCTION mc_endp

    mc_paro  shift, and go to state 52


State 34

   38 INSTRUCTION_AFFECTATION: mc_ident • mc_affectation EXPRESSION mc_pvg

    mc_affectation  shift, and go to state 53


State 35

   26 CODE_SECTION: mc_code INSTRUCTIONS • mc_endp
   28 INSTRUCTIONS: INSTRUCTIONS • INSTRUCTION

    mc_endp     shift, and go to state 54
    mc_comment  shift, and go to state 4
    mc_read     shift, and go to state 30
    mc_display  shift, and go to state 31
    mc_if       shift, and go to state 32
    mc_for      shift, and go to state 33
    mc_ident    shift, and go to state 34

    mc_endp     [reduce using rule 37 (INSTRUCTION)]
    mc_comment  [reduce using rule 37 (INSTRUCTION)]
    mc_read     [reduce using rule 37 (INSTRUCTION)]
    mc_display  [reduce using rule 37 (INSTRUCTION)]
    mc_if       [reduce using rule 37 (INSTRUCTION)]
    mc_for      [reduce using rule 37 (INSTRUCTION)]
    mc_ident    [reduce using rule 37 (INSTRUCTION)]

    COMMENT                  go to state 36
    INSTRUCTION              go to state 55
    INSTRUCTION_AFFECTATION  go to state 38
    INSTRUCTION_LIRE         go to state 39
    INSTRUCTION_ECRIRE       go to state 40
    INSTRUCTION_CONDITION    go to state 41
    STRUCTURE_CONDITIONELLE  go to state 42
    INSTRUCTION_BOUCLE       go to state 43
    BLOC_BOUCLE              go to state 44


State 36

   35 INSTRUCTION: COMMENT • INSTRUCTION

    mc_comment  shift, and go to state 4
    mc_read     shift, and go to state 30
    mc_display  shift, and go to state 31
    mc_if       shift, and go to state 32
    mc_for      shift, and go to state 33
    mc_ident    shift, and go to state 34

    mc_comment  [reduce using rule 37 (INSTRUCTION)]
    mc_read     [reduce using rule 37 (INSTRUCTION)]
    mc_display  [reduce using rule 37 (INSTRUCTION)]
    mc_if       [reduce using rule 37 (INSTRUCTION)]
    mc_for      [reduce using rule 37 (INSTRUCTION)]
    mc_ident    [reduce using rule 37 (INSTRUCTION)]
    $default    reduce using rule 37 (INSTRUCTION)

    COMMENT                  go to state 36
    INSTRUCTION              go to state 56
    INSTRUCTION_AFFECTATION  go to state 38
    INSTRUCTION_LIRE         go to state 39
    INSTRUCTION_ECRIRE       go to state 40
    INSTRUCTION_CONDITION    go to state 41
    STRUCTURE_CONDITIONELLE  go to state 42
    INSTRUCTION_BOUCLE       go to state 43
    BLOC_BOUCLE              go to state 44


State 37

   27 INSTRUCTIONS: INSTRUCTION •
   36 INSTRUCTION: INSTRUCTION • COMMENT
   71 BLOC_BOUCLE: INSTRUCTION •

    mc_comment  shift, and go to state 4

    mc_endp     reduce using rule 27 (INSTRUCTIONS)
    mc_endp     [reduce using rule 71 (BLOC_BOUCLE)]
    mc_comment  [reduce using rule 27 (INSTRUCTIONS)]
    mc_comment  [reduce using rule 71 (BLOC_BOUCLE)]
    mc_read     reduce using rule 27 (INSTRUCTIONS)
    mc_read     [reduce using rule 71 (BLOC_BOUCLE)]
    mc_display  reduce using rule 27 (INSTRUCTIONS)
    mc_display  [reduce using rule 71 (BLOC_BOUCLE)]
    mc_if       reduce using rule 27 (INSTRUCTIONS)
    mc_if       [reduce using rule 71 (BLOC_BOUCLE)]
    mc_else     reduce using rule 27 (INSTRUCTIONS)
    mc_else     [reduce using rule 71 (BLOC_BOUCLE)]
    mc_for      reduce using rule 27 (INSTRUCTIONS)
    mc_for      [reduce using rule 71 (BLOC_BOUCLE)]
    mc_ident    reduce using rule 27 (INSTRUCTIONS)
    mc_ident    [reduce using rule 71 (BLOC_BOUCLE)]
    $default    reduce using rule 27 (INSTRUCTIONS)

    COMMENT  go to state 57


State 38

   30 INSTRUCTION: INSTRUCTION_AFFECTATION •

    $default  reduce using rule 30 (INSTRUCTION)


State 39

   31 INSTRUCTION: INSTRUCTION_LIRE •

    $default  reduce using rule 31 (INSTRUCTION)


State 40

   32 INSTRUCTION: INSTRUCTION_ECRIRE •

    $default  reduce using rule 32 (INSTRUCTION)


State 41

   33 INSTRUCTION: INSTRUCTION_CONDITION •
   55 INSTRUCTION_CONDITION: INSTRUCTION_CONDITION • STRUCTURE_CONDITIONELLE

    mc_if  shift, and go to state 32

    mc_if     [reduce using rule 33 (INSTRUCTION)]
    $default  reduce using rule 33 (INSTRUCTION)

    STRUCTURE_CONDITIONELLE  go to state 58


State 42

   54 INSTRUCTION_CONDITION: STRUCTURE_CONDITIONELLE •

    $default  reduce using rule 54 (INSTRUCTION_CONDITION)


State 43

   34 INSTRUCTION: INSTRUCTION_BOUCLE •
   68 INSTRUCTION_BOUCLE: INSTRUCTION_BOUCLE • BLOC_BOUCLE

    mc_comment  shift, and go to state 4
    mc_read     shift, and go to state 30
    mc_display  shift, and go to state 31
    mc_if       shift, and go to state 32
    mc_for      shift, and go to state 33
    mc_ident    shift, and go to state 34

    mc_endp     reduce using rule 34 (INSTRUCTION)
    mc_endp     [reduce using rule 37 (INSTRUCTION)]
    mc_comment  [reduce using rule 34 (INSTRUCTION)]
    mc_comment  [reduce using rule 37 (INSTRUCTION)]
    mc_read     [reduce using rule 34 (INSTRUCTION)]
    mc_read     [reduce using rule 37 (INSTRUCTION)]
    mc_display  [reduce using rule 34 (INSTRUCTION)]
    mc_display  [reduce using rule 37 (INSTRUCTION)]
    mc_if       [reduce using rule 34 (INSTRUCTION)]
    mc_if       [reduce using rule 37 (INSTRUCTION)]
    mc_else     reduce using rule 34 (INSTRUCTION)
    mc_else     [reduce using rule 37 (INSTRUCTION)]
    mc_for      [reduce using rule 34 (INSTRUCTION)]
    mc_for      [reduce using rule 37 (INSTRUCTION)]
    mc_ident    [reduce using rule 34 (INSTRUCTION)]
    mc_ident    [reduce using rule 37 (INSTRUCTION)]
    $default    reduce using rule 34 (INSTRUCTION)

    COMMENT                  go to state 36
    INSTRUCTION              go to state 59
    INSTRUCTION_AFFECTATION  go to state 38
    INSTRUCTION_LIRE         go to state 39
    INSTRUCTION_ECRIRE       go to state 40
    INSTRUCTION_CONDITION    go to state 41
    STRUCTURE_CONDITIONELLE  go to state 42
    INSTRUCTION_BOUCLE       go to state 43
    BLOC_BOUCLE              go to state 60


State 44

   69 INSTRUCTION_BOUCLE: BLOC_BOUCLE •

    $default  reduce using rule 69 (INSTRUCTION_BOUCLE)


State 45

    2 program: $@1 COMMENT mc_ident DATA_SECTION CODE_SECTION mc_endp •

    $default  reduce using rule 2 (program)


State 46

   21 DEC_VECTOR: mc_vector mc_deuxp mc_ident • $@3 mc_crocheto mc_cst mc_vg mc_cst mc_deuxp VAR_TYPE mc_crochetf mc_pvg

    $default  reduce using rule 20 ($@3)

    $@3  go to state 61


State 47

   19 DEC_CONST: mc_const mc_deuxp mc_ident • mc_affectation VALEURS mc_pvg

    mc_affectation  shift, and go to state 62


State 48

   10 DEC: VAR_TYPE $@2 mc_deuxp • LISTE_VAR mc_pvg

    mc_ident  shift, and go to state 63

    LISTE_VAR  go to state 64


State 49

   52 INSTRUCTION_LIRE: mc_read mc_paro • mc_chaine mc_deuxp mc_adresse mc_ident mc_parf mc_pvg

    mc_chaine  shift, and go to state 65


State 50

   53 INSTRUCTION_ECRIRE: mc_display mc_paro • mc_chaine mc_deuxp mc_ident mc_parf mc_pvg

    mc_chaine  shift, and go to state 66


State 51

   56 STRUCTURE_CONDITIONELLE: mc_if mc_paro • CONDITION mc_parf mc_deuxp INSTRUCTIONS mc_else mc_deuxp INSTRUCTIONS mc_endp
   57                        | mc_if mc_paro • CONDITION mc_parf mc_deuxp INSTRUCTIONS mc_endp

    mc_paro        shift, and go to state 67
    INT_CONST      shift, and go to state 68
    mc_ident       shift, and go to state 69
    mc_cst         shift, and go to state 70
    mc_chaine      shift, and go to state 71
    mc_charactere  shift, and go to state 72

    EXPRESSION  go to state 73
    TERME       go to state 74
    FACTEUR     go to state 75
    CONDITION   go to state 76


State 52

   70 BLOC_BOUCLE: mc_for mc_paro • mc_ident mc_deuxp mc_cst mc_deuxp mc_ident mc_parf INSTRUCTION mc_endp

    mc_ident  shift, and go to state 77


State 53

   38 INSTRUCTION_AFFECTATION: mc_ident mc_affectation • EXPRESSION mc_pvg

    mc_paro        shift, and go to state 67
    INT_CONST      shift, and go to state 68
    mc_ident       shift, and go to state 69
    mc_cst         shift, and go to state 70
    mc_chaine      shift, and go to state 71
    mc_charactere  shift, and go to state 72

    EXPRESSION  go to state 78
    TERME       go to state 74
    FACTEUR     go to state 75


State 54

   26 CODE_SECTION: mc_code INSTRUCTIONS mc_endp •

    $default  reduce using rule 26 (CODE_SECTION)


State 55

   28 INSTRUCTIONS: INSTRUCTIONS INSTRUCTION •
   36 INSTRUCTION: INSTRUCTION • COMMENT
   71 BLOC_BOUCLE: INSTRUCTION •

    mc_comment  shift, and go to state 4

    mc_endp     reduce using rule 28 (INSTRUCTIONS)
    mc_endp     [reduce using rule 71 (BLOC_BOUCLE)]
    mc_comment  [reduce using rule 28 (INSTRUCTIONS)]
    mc_comment  [reduce using rule 71 (BLOC_BOUCLE)]
    mc_read     reduce using rule 28 (INSTRUCTIONS)
    mc_read     [reduce using rule 71 (BLOC_BOUCLE)]
    mc_display  reduce using rule 28 (INSTRUCTIONS)
    mc_display  [reduce using rule 71 (BLOC_BOUCLE)]
    mc_if       reduce using rule 28 (INSTRUCTIONS)
    mc_if       [reduce using rule 71 (BLOC_BOUCLE)]
    mc_else     reduce using rule 28 (INSTRUCTIONS)
    mc_else     [reduce using rule 71 (BLOC_BOUCLE)]
    mc_for      reduce using rule 28 (INSTRUCTIONS)
    mc_for      [reduce using rule 71 (BLOC_BOUCLE)]
    mc_ident    reduce using rule 28 (INSTRUCTIONS)
    mc_ident    [reduce using rule 71 (BLOC_BOUCLE)]
    $default    reduce using rule 28 (INSTRUCTIONS)

    COMMENT  go to state 57


State 56

   35 INSTRUCTION: COMMENT INSTRUCTION •
   36            | INSTRUCTION • COMMENT
   71 BLOC_BOUCLE: INSTRUCTION •

    mc_comment  shift, and go to state 4

    mc_endp     reduce using rule 35 (INSTRUCTION)
    mc_endp     [reduce using rule 71 (BLOC_BOUCLE)]
    mc_comment  [reduce using rule 35 (INSTRUCTION)]
    mc_comment  [reduce using rule 71 (BLOC_BOUCLE)]
    mc_read     reduce using rule 35 (INSTRUCTION)
    mc_read     [reduce using rule 71 (BLOC_BOUCLE)]
    mc_display  reduce using rule 35 (INSTRUCTION)
    mc_display  [reduce using rule 71 (BLOC_BOUCLE)]
    mc_if       reduce using rule 35 (INSTRUCTION)
    mc_if       [reduce using rule 71 (BLOC_BOUCLE)]
    mc_else     reduce using rule 35 (INSTRUCTION)
    mc_else     [reduce using rule 71 (BLOC_BOUCLE)]
    mc_for      reduce using rule 35 (INSTRUCTION)
    mc_for      [reduce using rule 71 (BLOC_BOUCLE)]
    mc_ident    reduce using rule 35 (INSTRUCTION)
    mc_ident    [reduce using rule 71 (BLOC_BOUCLE)]
    $default    reduce using rule 35 (INSTRUCTION)

    COMMENT  go to state 57


State 57

   36 INSTRUCTION: INSTRUCTION COMMENT •

    $default  reduce using rule 36 (INSTRUCTION)


State 58

   55 INSTRUCTION_CONDITION: INSTRUCTION_CONDITION STRUCTURE_CONDITIONELLE •

    $default  reduce using rule 55 (INSTRUCTION_CONDITION)


State 59

   36 INSTRUCTION: INSTRUCTION • COMMENT
   71 BLOC_BOUCLE: INSTRUCTION •

    mc_comment  shift, and go to state 4

    mc_comment  [reduce using rule 71 (BLOC_BOUCLE)]
    $default    reduce using rule 71 (BLOC_BOUCLE)

    COMMENT  go to state 57


State 60

   68 INSTRUCTION_BOUCLE: INSTRUCTION_BOUCLE BLOC_BOUCLE •
   69                   | BLOC_BOUCLE •

    mc_endp     reduce using rule 68 (INSTRUCTION_BOUCLE)
    mc_endp     [reduce using rule 69 (INSTRUCTION_BOUCLE)]
    mc_comment  reduce using rule 68 (INSTRUCTION_BOUCLE)
    mc_comment  [reduce using rule 69 (INSTRUCTION_BOUCLE)]
    mc_read     reduce using rule 68 (INSTRUCTION_BOUCLE)
    mc_read     [reduce using rule 69 (INSTRUCTION_BOUCLE)]
    mc_display  reduce using rule 68 (INSTRUCTION_BOUCLE)
    mc_display  [reduce using rule 69 (INSTRUCTION_BOUCLE)]
    mc_if       reduce using rule 68 (INSTRUCTION_BOUCLE)
    mc_if       [reduce using rule 69 (INSTRUCTION_BOUCLE)]
    mc_else     reduce using rule 68 (INSTRUCTION_BOUCLE)
    mc_else     [reduce using rule 69 (INSTRUCTION_BOUCLE)]
    mc_for      reduce using rule 68 (INSTRUCTION_BOUCLE)
    mc_for      [reduce using rule 69 (INSTRUCTION_BOUCLE)]
    mc_ident    reduce using rule 68 (INSTRUCTION_BOUCLE)
    mc_ident    [reduce using rule 69 (INSTRUCTION_BOUCLE)]
    $default    reduce using rule 68 (INSTRUCTION_BOUCLE)


State 61

   21 DEC_VECTOR: mc_vector mc_deuxp mc_ident $@3 • mc_crocheto mc_cst mc_vg mc_cst mc_deuxp VAR_TYPE mc_crochetf mc_pvg

    mc_crocheto  shift, and go to state 79


State 62

   19 DEC_CONST: mc_const mc_deuxp mc_ident mc_affectation • VALEURS mc_pvg

    INT_CONST      shift, and go to state 80
    mc_cst         shift, and go to state 81
    mc_chaine      shift, and go to state 82
    mc_charactere  shift, and go to state 83

    VALEURS  go to state 84


State 63

   17 LISTE_VAR: mc_ident •
   18          | mc_ident • mc_separateur LISTE_VAR

    mc_separateur  shift, and go to state 85

    $default  reduce using rule 17 (LISTE_VAR)


State 64

   10 DEC: VAR_TYPE $@2 mc_deuxp LISTE_VAR • mc_pvg

    mc_pvg  shift, and go to state 86


State 65

   52 INSTRUCTION_LIRE: mc_read mc_paro mc_chaine • mc_deuxp mc_adresse mc_ident mc_parf mc_pvg

    mc_deuxp  shift, and go to state 87


State 66

   53 INSTRUCTION_ECRIRE: mc_display mc_paro mc_chaine • mc_deuxp mc_ident mc_parf mc_pvg

    mc_deuxp  shift, and go to state 88


State 67

   50 FACTEUR: mc_paro • EXPRESSION mc_parf
   51        | mc_paro • mc_moins FACTEUR mc_parf

    mc_moins       shift, and go to state 89
    mc_paro        shift, and go to state 67
    INT_CONST      shift, and go to state 68
    mc_ident       shift, and go to state 69
    mc_cst         shift, and go to state 70
    mc_chaine      shift, and go to state 71
    mc_charactere  shift, and go to state 72

    EXPRESSION  go to state 90
    TERME       go to state 74
    FACTEUR     go to state 75


State 68

   46 FACTEUR: INT_CONST •

    $default  reduce using rule 46 (FACTEUR)


State 69

   45 FACTEUR: mc_ident •

    $default  reduce using rule 45 (FACTEUR)


State 70

   49 FACTEUR: mc_cst •

    $default  reduce using rule 49 (FACTEUR)


State 71

   48 FACTEUR: mc_chaine •

    $default  reduce using rule 48 (FACTEUR)


State 72

   47 FACTEUR: mc_charactere •

    $default  reduce using rule 47 (FACTEUR)


State 73

   40 EXPRESSION: EXPRESSION • mc_plus TERME
   41           | EXPRESSION • mc_moins TERME
   60 CONDITION: EXPRESSION • OPERATEUR_COMPAR EXPRESSION
   61          | EXPRESSION •

    mc_sup    shift, and go to state 91
    mc_inf    shift, and go to state 92
    mc_supeg  shift, and go to state 93
    mc_infeg  shift, and go to state 94
    mc_egal   shift, and go to state 95
    mc_diff   shift, and go to state 96
    mc_plus   shift, and go to state 97
    mc_moins  shift, and go to state 98

    $default  reduce using rule 61 (CONDITION)

    OPERATEUR_COMPAR  go to state 99


State 74

   39 EXPRESSION: TERME •
   43 TERME: TERME • mc_mult FACTEUR
   44      | TERME • mc_div FACTEUR

    mc_mult  shift, and go to state 100
    mc_div   shift, and go to state 101

    $default  reduce using rule 39 (EXPRESSION)


State 75

   42 TERME: FACTEUR •

    $default  reduce using rule 42 (TERME)


State 76

   56 STRUCTURE_CONDITIONELLE: mc_if mc_paro CONDITION • mc_parf mc_deuxp INSTRUCTIONS mc_else mc_deuxp INSTRUCTIONS mc_endp
   57                        | mc_if mc_paro CONDITION • mc_parf mc_deuxp INSTRUCTIONS mc_endp
   58 CONDITION: CONDITION • mc_and CONDITION
   59          | CONDITION • mc_or CONDITION

    mc_or    shift, and go to state 102
    mc_and   shift, and go to state 103
    mc_parf  shift, and go to state 104


State 77

   70 BLOC_BOUCLE: mc_for mc_paro mc_ident • mc_deuxp mc_cst mc_deuxp mc_ident mc_parf INSTRUCTION mc_endp

    mc_deuxp  shift, and go to state 105


State 78

   38 INSTRUCTION_AFFECTATION: mc_ident mc_affectation EXPRESSION • mc_pvg
   40 EXPRESSION: EXPRESSION • mc_plus TERME
   41           | EXPRESSION • mc_moins TERME

    mc_pvg    shift, and go to state 106
    mc_plus   shift, and go to state 97
    mc_moins  shift, and go to state 98


State 79

   21 DEC_VECTOR: mc_vector mc_deuxp mc_ident $@3 mc_crocheto • mc_cst mc_vg mc_cst mc_deuxp VAR_TYPE mc_crochetf mc_pvg

    mc_cst  shift, and go to state 107


State 80

   24 VALEURS: INT_CONST •

    $default  reduce using rule 24 (VALEURS)


State 81

   25 VALEURS: mc_cst •

    $default  reduce using rule 25 (VALEURS)


State 82

   23 VALEURS: mc_chaine •

    $default  reduce using rule 23 (VALEURS)


State 83

   22 VALEURS: mc_charactere •

    $default  reduce using rule 22 (VALEURS)


State 84

   19 DEC_CONST: mc_const mc_deuxp mc_ident mc_affectation VALEURS • mc_pvg

    mc_pvg  shift, and go to state 108


State 85

   18 LISTE_VAR: mc_ident mc_separateur • LISTE_VAR

    mc_ident  shift, and go to state 63

    LISTE_VAR  go to state 109


State 86

   10 DEC: VAR_TYPE $@2 mc_deuxp LISTE_VAR mc_pvg •

    $default  reduce using rule 10 (DEC)


State 87

   52 INSTRUCTION_LIRE: mc_read mc_paro mc_chaine mc_deuxp • mc_adresse mc_ident mc_parf mc_pvg

    mc_adresse  shift, and go to state 110


State 88

   53 INSTRUCTION_ECRIRE: mc_display mc_paro mc_chaine mc_deuxp • mc_ident mc_parf mc_pvg

    mc_ident  shift, and go to state 111


State 89

   51 FACTEUR: mc_paro mc_moins • FACTEUR mc_parf

    mc_paro        shift, and go to state 67
    INT_CONST      shift, and go to state 68
    mc_ident       shift, and go to state 69
    mc_cst         shift, and go to state 70
    mc_chaine      shift, and go to state 71
    mc_charactere  shift, and go to state 72

    FACTEUR  go to state 112


State 90

   40 EXPRESSION: EXPRESSION • mc_plus TERME
   41           | EXPRESSION • mc_moins TERME
   50 FACTEUR: mc_paro EXPRESSION • mc_parf

    mc_plus   shift, and go to state 97
    mc_moins  shift, and go to state 98
    mc_parf   shift, and go to state 113


State 91

   62 OPERATEUR_COMPAR: mc_sup •

    $default  reduce using rule 62 (OPERATEUR_COMPAR)


State 92

   63 OPERATEUR_COMPAR: mc_inf •

    $default  reduce using rule 63 (OPERATEUR_COMPAR)


State 93

   64 OPERATEUR_COMPAR: mc_supeg •

    $default  reduce using rule 64 (OPERATEUR_COMPAR)


State 94

   65 OPERATEUR_COMPAR: mc_infeg •

    $default  reduce using rule 65 (OPERATEUR_COMPAR)


State 95

   66 OPERATEUR_COMPAR: mc_egal •

    $default  reduce using rule 66 (OPERATEUR_COMPAR)


State 96

   67 OPERATEUR_COMPAR: mc_diff •

    $default  reduce using rule 67 (OPERATEUR_COMPAR)


State 97

   40 EXPRESSION: EXPRESSION mc_plus • TERME

    mc_paro        shift, and go to state 67
    INT_CONST      shift, and go to state 68
    mc_ident       shift, and go to state 69
    mc_cst         shift, and go to state 70
    mc_chaine      shift, and go to state 71
    mc_charactere  shift, and go to state 72

    TERME    go to state 114
    FACTEUR  go to state 75


State 98

   41 EXPRESSION: EXPRESSION mc_moins • TERME

    mc_paro        shift, and go to state 67
    INT_CONST      shift, and go to state 68
    mc_ident       shift, and go to state 69
    mc_cst         shift, and go to state 70
    mc_chaine      shift, and go to state 71
    mc_charactere  shift, and go to state 72

    TERME    go to state 115
    FACTEUR  go to state 75


State 99

   60 CONDITION: EXPRESSION OPERATEUR_COMPAR • EXPRESSION

    mc_paro        shift, and go to state 67
    INT_CONST      shift, and go to state 68
    mc_ident       shift, and go to state 69
    mc_cst         shift, and go to state 70
    mc_chaine      shift, and go to state 71
    mc_charactere  shift, and go to state 72

    EXPRESSION  go to state 116
    TERME       go to state 74
    FACTEUR     go to state 75


State 100

   43 TERME: TERME mc_mult • FACTEUR

    mc_paro        shift, and go to state 67
    INT_CONST      shift, and go to state 68
    mc_ident       shift, and go to state 69
    mc_cst         shift, and go to state 70
    mc_chaine      shift, and go to state 71
    mc_charactere  shift, and go to state 72

    FACTEUR  go to state 117


State 101

   44 TERME: TERME mc_div • FACTEUR

    mc_paro        shift, and go to state 67
    INT_CONST      shift, and go to state 68
    mc_ident       shift, and go to state 69
    mc_cst         shift, and go to state 70
    mc_chaine      shift, and go to state 71
    mc_charactere  shift, and go to state 72

    FACTEUR  go to state 118


State 102

   59 CONDITION: CONDITION mc_or • CONDITION

    mc_paro        shift, and go to state 67
    INT_CONST      shift, and go to state 68
    mc_ident       shift, and go to state 69
    mc_cst         shift, and go to state 70
    mc_chaine      shift, and go to state 71
    mc_charactere  shift, and go to state 72

    EXPRESSION  go to state 73
    TERME       go to state 74
    FACTEUR     go to state 75
    CONDITION   go to state 119


State 103

   58 CONDITION: CONDITION mc_and • CONDITION

    mc_paro        shift, and go to state 67
    INT_CONST      shift, and go to state 68
    mc_ident       shift, and go to state 69
    mc_cst         shift, and go to state 70
    mc_chaine      shift, and go to state 71
    mc_charactere  shift, and go to state 72

    EXPRESSION  go to state 73
    TERME       go to state 74
    FACTEUR     go to state 75
    CONDITION   go to state 120


State 104

   56 STRUCTURE_CONDITIONELLE: mc_if mc_paro CONDITION mc_parf • mc_deuxp INSTRUCTIONS mc_else mc_deuxp INSTRUCTIONS mc_endp
   57                        | mc_if mc_paro CONDITION mc_parf • mc_deuxp INSTRUCTIONS mc_endp

    mc_deuxp  shift, and go to state 121


State 105

   70 BLOC_BOUCLE: mc_for mc_paro mc_ident mc_deuxp • mc_cst mc_deuxp mc_ident mc_parf INSTRUCTION mc_endp

    mc_cst  shift, and go to state 122


State 106

   38 INSTRUCTION_AFFECTATION: mc_ident mc_affectation EXPRESSION mc_pvg •

    $default  reduce using rule 38 (INSTRUCTION_AFFECTATION)


State 107

   21 DEC_VECTOR: mc_vector mc_deuxp mc_ident $@3 mc_crocheto mc_cst • mc_vg mc_cst mc_deuxp VAR_TYPE mc_crochetf mc_pvg

    mc_vg  shift, and go to state 123


State 108

   19 DEC_CONST: mc_const mc_deuxp mc_ident mc_affectation VALEURS mc_pvg •

    $default  reduce using rule 19 (DEC_CONST)


State 109

   18 LISTE_VAR: mc_ident mc_separateur LISTE_VAR •

    $default  reduce using rule 18 (LISTE_VAR)


State 110

   52 INSTRUCTION_LIRE: mc_read mc_paro mc_chaine mc_deuxp mc_adresse • mc_ident mc_parf mc_pvg

    mc_ident  shift, and go to state 124


State 111

   53 INSTRUCTION_ECRIRE: mc_display mc_paro mc_chaine mc_deuxp mc_ident • mc_parf mc_pvg

    mc_parf  shift, and go to state 125


State 112

   51 FACTEUR: mc_paro mc_moins FACTEUR • mc_parf

    mc_parf  shift, and go to state 126


State 113

   50 FACTEUR: mc_paro EXPRESSION mc_parf •

    $default  reduce using rule 50 (FACTEUR)


State 114

   40 EXPRESSION: EXPRESSION mc_plus TERME •
   43 TERME: TERME • mc_mult FACTEUR
   44      | TERME • mc_div FACTEUR

    mc_mult  shift, and go to state 100
    mc_div   shift, and go to state 101

    $default  reduce using rule 40 (EXPRESSION)


State 115

   41 EXPRESSION: EXPRESSION mc_moins TERME •
   43 TERME: TERME • mc_mult FACTEUR
   44      | TERME • mc_div FACTEUR

    mc_mult  shift, and go to state 100
    mc_div   shift, and go to state 101

    $default  reduce using rule 41 (EXPRESSION)


State 116

   40 EXPRESSION: EXPRESSION • mc_plus TERME
   41           | EXPRESSION • mc_moins TERME
   60 CONDITION: EXPRESSION OPERATEUR_COMPAR EXPRESSION •

    mc_plus   shift, and go to state 97
    mc_moins  shift, and go to state 98

    $default  reduce using rule 60 (CONDITION)


State 117

   43 TERME: TERME mc_mult FACTEUR •

    $default  reduce using rule 43 (TERME)


State 118

   44 TERME: TERME mc_div FACTEUR •

    $default  reduce using rule 44 (TERME)


State 119

   58 CONDITION: CONDITION • mc_and CONDITION
   59          | CONDITION • mc_or CONDITION
   59          | CONDITION mc_or CONDITION •

    mc_or   shift, and go to state 102
    mc_and  shift, and go to state 103

    mc_or     [reduce using rule 59 (CONDITION)]
    mc_and    [reduce using rule 59 (CONDITION)]
    $default  reduce using rule 59 (CONDITION)


State 120

   58 CONDITION: CONDITION • mc_and CONDITION
   58          | CONDITION mc_and CONDITION •
   59          | CONDITION • mc_or CONDITION

    mc_or   shift, and go to state 102
    mc_and  shift, and go to state 103

    mc_or     [reduce using rule 58 (CONDITION)]
    mc_and    [reduce using rule 58 (CONDITION)]
    $default  reduce using rule 58 (CONDITION)


State 121

   56 STRUCTURE_CONDITIONELLE: mc_if mc_paro CONDITION mc_parf mc_deuxp • INSTRUCTIONS mc_else mc_deuxp INSTRUCTIONS mc_endp
   57                        | mc_if mc_paro CONDITION mc_parf mc_deuxp • INSTRUCTIONS mc_endp

    mc_comment  shift, and go to state 4
    mc_read     shift, and go to state 30
    mc_display  shift, and go to state 31
    mc_if       shift, and go to state 32
    mc_for      shift, and go to state 33
    mc_ident    shift, and go to state 34

    mc_comment  [reduce using rule 37 (INSTRUCTION)]
    mc_read     [reduce using rule 37 (INSTRUCTION)]
    mc_display  [reduce using rule 37 (INSTRUCTION)]
    mc_if       [reduce using rule 37 (INSTRUCTION)]
    mc_for      [reduce using rule 37 (INSTRUCTION)]
    mc_ident    [reduce using rule 37 (INSTRUCTION)]
    $default    reduce using rule 37 (INSTRUCTION)

    INSTRUCTIONS             go to state 127
    COMMENT                  go to state 36
    INSTRUCTION              go to state 37
    INSTRUCTION_AFFECTATION  go to state 38
    INSTRUCTION_LIRE         go to state 39
    INSTRUCTION_ECRIRE       go to state 40
    INSTRUCTION_CONDITION    go to state 41
    STRUCTURE_CONDITIONELLE  go to state 42
    INSTRUCTION_BOUCLE       go to state 43
    BLOC_BOUCLE              go to state 44


State 122

   70 BLOC_BOUCLE: mc_for mc_paro mc_ident mc_deuxp mc_cst • mc_deuxp mc_ident mc_parf INSTRUCTION mc_endp

    mc_deuxp  shift, and go to state 128


State 123

   21 DEC_VECTOR: mc_vector mc_deuxp mc_ident $@3 mc_crocheto mc_cst mc_vg • mc_cst mc_deuxp VAR_TYPE mc_crochetf mc_pvg

    mc_cst  shift, and go to state 129


State 124

   52 INSTRUCTION_LIRE: mc_read mc_paro mc_chaine mc_deuxp mc_adresse mc_ident • mc_parf mc_pvg

    mc_parf  shift, and go to state 130


State 125

   53 INSTRUCTION_ECRIRE: mc_display mc_paro mc_chaine mc_deuxp mc_ident mc_parf • mc_pvg

    mc_pvg  shift, and go to state 131


State 126

   51 FACTEUR: mc_paro mc_moins FACTEUR mc_parf •

    $default  reduce using rule 51 (FACTEUR)


State 127

   28 INSTRUCTIONS: INSTRUCTIONS • INSTRUCTION
   56 STRUCTURE_CONDITIONELLE: mc_if mc_paro CONDITION mc_parf mc_deuxp INSTRUCTIONS • mc_else mc_deuxp INSTRUCTIONS mc_endp
   57                        | mc_if mc_paro CONDITION mc_parf mc_deuxp INSTRUCTIONS • mc_endp

    mc_endp     shift, and go to state 132
    mc_comment  shift, and go to state 4
    mc_read     shift, and go to state 30
    mc_display  shift, and go to state 31
    mc_if       shift, and go to state 32
    mc_else     shift, and go to state 133
    mc_for      shift, and go to state 33
    mc_ident    shift, and go to state 34

    mc_endp     [reduce using rule 37 (INSTRUCTION)]
    mc_comment  [reduce using rule 37 (INSTRUCTION)]
    mc_read     [reduce using rule 37 (INSTRUCTION)]
    mc_display  [reduce using rule 37 (INSTRUCTION)]
    mc_if       [reduce using rule 37 (INSTRUCTION)]
    mc_else     [reduce using rule 37 (INSTRUCTION)]
    mc_for      [reduce using rule 37 (INSTRUCTION)]
    mc_ident    [reduce using rule 37 (INSTRUCTION)]

    COMMENT                  go to state 36
    INSTRUCTION              go to state 55
    INSTRUCTION_AFFECTATION  go to state 38
    INSTRUCTION_LIRE         go to state 39
    INSTRUCTION_ECRIRE       go to state 40
    INSTRUCTION_CONDITION    go to state 41
    STRUCTURE_CONDITIONELLE  go to state 42
    INSTRUCTION_BOUCLE       go to state 43
    BLOC_BOUCLE              go to state 44


State 128

   70 BLOC_BOUCLE: mc_for mc_paro mc_ident mc_deuxp mc_cst mc_deuxp • mc_ident mc_parf INSTRUCTION mc_endp

    mc_ident  shift, and go to state 134


State 129

   21 DEC_VECTOR: mc_vector mc_deuxp mc_ident $@3 mc_crocheto mc_cst mc_vg mc_cst • mc_deuxp VAR_TYPE mc_crochetf mc_pvg

    mc_deuxp  shift, and go to state 135


State 130

   52 INSTRUCTION_LIRE: mc_read mc_paro mc_chaine mc_deuxp mc_adresse mc_ident mc_parf • mc_pvg

    mc_pvg  shift, and go to state 136


State 131

   53 INSTRUCTION_ECRIRE: mc_display mc_paro mc_chaine mc_deuxp mc_ident mc_parf mc_pvg •

    $default  reduce using rule 53 (INSTRUCTION_ECRIRE)


State 132

   57 STRUCTURE_CONDITIONELLE: mc_if mc_paro CONDITION mc_parf mc_deuxp INSTRUCTIONS mc_endp •

    $default  reduce using rule 57 (STRUCTURE_CONDITIONELLE)


State 133

   56 STRUCTURE_CONDITIONELLE: mc_if mc_paro CONDITION mc_parf mc_deuxp INSTRUCTIONS mc_else • mc_deuxp INSTRUCTIONS mc_endp

    mc_deuxp  shift, and go to state 137


State 134

   70 BLOC_BOUCLE: mc_for mc_paro mc_ident mc_deuxp mc_cst mc_deuxp mc_ident • mc_parf INSTRUCTION mc_endp

    mc_parf  shift, and go to state 138


State 135

   21 DEC_VECTOR: mc_vector mc_deuxp mc_ident $@3 mc_crocheto mc_cst mc_vg mc_cst mc_deuxp • VAR_TYPE mc_crochetf mc_pvg

    mc_integ   shift, and go to state 10
    mc_float   shift, and go to state 11
    mc_char    shift, and go to state 12
    mc_string  shift, and go to state 13

    VAR_TYPE  go to state 139


State 136

   52 INSTRUCTION_LIRE: mc_read mc_paro mc_chaine mc_deuxp mc_adresse mc_ident mc_parf mc_pvg •

    $default  reduce using rule 52 (INSTRUCTION_LIRE)


State 137

   56 STRUCTURE_CONDITIONELLE: mc_if mc_paro CONDITION mc_parf mc_deuxp INSTRUCTIONS mc_else mc_deuxp • INSTRUCTIONS mc_endp

    mc_comment  shift, and go to state 4
    mc_read     shift, and go to state 30
    mc_display  shift, and go to state 31
    mc_if       shift, and go to state 32
    mc_for      shift, and go to state 33
    mc_ident    shift, and go to state 34

    mc_comment  [reduce using rule 37 (INSTRUCTION)]
    mc_read     [reduce using rule 37 (INSTRUCTION)]
    mc_display  [reduce using rule 37 (INSTRUCTION)]
    mc_if       [reduce using rule 37 (INSTRUCTION)]
    mc_for      [reduce using rule 37 (INSTRUCTION)]
    mc_ident    [reduce using rule 37 (INSTRUCTION)]
    $default    reduce using rule 37 (INSTRUCTION)

    INSTRUCTIONS             go to state 140
    COMMENT                  go to state 36
    INSTRUCTION              go to state 37
    INSTRUCTION_AFFECTATION  go to state 38
    INSTRUCTION_LIRE         go to state 39
    INSTRUCTION_ECRIRE       go to state 40
    INSTRUCTION_CONDITION    go to state 41
    STRUCTURE_CONDITIONELLE  go to state 42
    INSTRUCTION_BOUCLE       go to state 43
    BLOC_BOUCLE              go to state 44


State 138

   70 BLOC_BOUCLE: mc_for mc_paro mc_ident mc_deuxp mc_cst mc_deuxp mc_ident mc_parf • INSTRUCTION mc_endp

    mc_comment  shift, and go to state 4
    mc_read     shift, and go to state 30
    mc_display  shift, and go to state 31
    mc_if       shift, and go to state 32
    mc_for      shift, and go to state 33
    mc_ident    shift, and go to state 34

    mc_comment  [reduce using rule 37 (INSTRUCTION)]
    mc_read     [reduce using rule 37 (INSTRUCTION)]
    mc_display  [reduce using rule 37 (INSTRUCTION)]
    mc_if       [reduce using rule 37 (INSTRUCTION)]
    mc_for      [reduce using rule 37 (INSTRUCTION)]
    mc_ident    [reduce using rule 37 (INSTRUCTION)]
    $default    reduce using rule 37 (INSTRUCTION)

    COMMENT                  go to state 36
    INSTRUCTION              go to state 141
    INSTRUCTION_AFFECTATION  go to state 38
    INSTRUCTION_LIRE         go to state 39
    INSTRUCTION_ECRIRE       go to state 40
    INSTRUCTION_CONDITION    go to state 41
    STRUCTURE_CONDITIONELLE  go to state 42
    INSTRUCTION_BOUCLE       go to state 43
    BLOC_BOUCLE              go to state 44


State 139

   21 DEC_VECTOR: mc_vector mc_deuxp mc_ident $@3 mc_crocheto mc_cst mc_vg mc_cst mc_deuxp VAR_TYPE • mc_crochetf mc_pvg

    mc_crochetf  shift, and go to state 142


State 140

   28 INSTRUCTIONS: INSTRUCTIONS • INSTRUCTION
   56 STRUCTURE_CONDITIONELLE: mc_if mc_paro CONDITION mc_parf mc_deuxp INSTRUCTIONS mc_else mc_deuxp INSTRUCTIONS • mc_endp

    mc_endp     shift, and go to state 143
    mc_comment  shift, and go to state 4
    mc_read     shift, and go to state 30
    mc_display  shift, and go to state 31
    mc_if       shift, and go to state 32
    mc_for      shift, and go to state 33
    mc_ident    shift, and go to state 34

    mc_endp     [reduce using rule 37 (INSTRUCTION)]
    mc_comment  [reduce using rule 37 (INSTRUCTION)]
    mc_read     [reduce using rule 37 (INSTRUCTION)]
    mc_display  [reduce using rule 37 (INSTRUCTION)]
    mc_if       [reduce using rule 37 (INSTRUCTION)]
    mc_for      [reduce using rule 37 (INSTRUCTION)]
    mc_ident    [reduce using rule 37 (INSTRUCTION)]

    COMMENT                  go to state 36
    INSTRUCTION              go to state 55
    INSTRUCTION_AFFECTATION  go to state 38
    INSTRUCTION_LIRE         go to state 39
    INSTRUCTION_ECRIRE       go to state 40
    INSTRUCTION_CONDITION    go to state 41
    STRUCTURE_CONDITIONELLE  go to state 42
    INSTRUCTION_BOUCLE       go to state 43
    BLOC_BOUCLE              go to state 44


State 141

   36 INSTRUCTION: INSTRUCTION • COMMENT
   70 BLOC_BOUCLE: mc_for mc_paro mc_ident mc_deuxp mc_cst mc_deuxp mc_ident mc_parf INSTRUCTION • mc_endp
   71            | INSTRUCTION •

    mc_endp     shift, and go to state 144
    mc_comment  shift, and go to state 4

    mc_endp     [reduce using rule 71 (BLOC_BOUCLE)]
    mc_comment  [reduce using rule 71 (BLOC_BOUCLE)]
    $default    reduce using rule 71 (BLOC_BOUCLE)

    COMMENT  go to state 57


State 142

   21 DEC_VECTOR: mc_vector mc_deuxp mc_ident $@3 mc_crocheto mc_cst mc_vg mc_cst mc_deuxp VAR_TYPE mc_crochetf • mc_pvg

    mc_pvg  shift, and go to state 145


State 143

   56 STRUCTURE_CONDITIONELLE: mc_if mc_paro CONDITION mc_parf mc_deuxp INSTRUCTIONS mc_else mc_deuxp INSTRUCTIONS mc_endp •

    $default  reduce using rule 56 (STRUCTURE_CONDITIONELLE)


State 144

   70 BLOC_BOUCLE: mc_for mc_paro mc_ident mc_deuxp mc_cst mc_deuxp mc_ident mc_parf INSTRUCTION mc_endp •

    $default  reduce using rule 70 (BLOC_BOUCLE)


State 145

   21 DEC_VECTOR: mc_vector mc_deuxp mc_ident $@3 mc_crocheto mc_cst mc_vg mc_cst mc_deuxp VAR_TYPE mc_crochetf mc_pvg •

    $default  reduce using rule 21 (DEC_VECTOR)
